// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bluewand.proto

package bluewand

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// EmptyMessage is represented as an empty payload sent to the RPC endpoint
type EmptyMessage struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyMessage) Reset()         { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()    {}
func (*EmptyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bluewand_6d8fc805bd0dbb0e, []int{0}
}
func (m *EmptyMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyMessage.Unmarshal(m, b)
}
func (m *EmptyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyMessage.Marshal(b, m, deterministic)
}
func (dst *EmptyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyMessage.Merge(dst, src)
}
func (m *EmptyMessage) XXX_Size() int {
	return xxx_messageInfo_EmptyMessage.Size(m)
}
func (m *EmptyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyMessage proto.InternalMessageInfo

// Indentifier is represented as the unique indentifer string (UUID) of the
// Wand.
type Identifier struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Identifier) Reset()         { *m = Identifier{} }
func (m *Identifier) String() string { return proto.CompactTextString(m) }
func (*Identifier) ProtoMessage()    {}
func (*Identifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_bluewand_6d8fc805bd0dbb0e, []int{1}
}
func (m *Identifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Identifier.Unmarshal(m, b)
}
func (m *Identifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Identifier.Marshal(b, m, deterministic)
}
func (dst *Identifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Identifier.Merge(dst, src)
}
func (m *Identifier) XXX_Size() int {
	return xxx_messageInfo_Identifier.Size(m)
}
func (m *Identifier) XXX_DiscardUnknown() {
	xxx_messageInfo_Identifier.DiscardUnknown(m)
}

var xxx_messageInfo_Identifier proto.InternalMessageInfo

func (m *Identifier) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

// ButtonMessage is represented as a boolean of whether the Button is in Pressed
// state.
type ButtonMessage struct {
	Pressed              bool     `protobuf:"varint,1,opt,name=pressed,proto3" json:"pressed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ButtonMessage) Reset()         { *m = ButtonMessage{} }
func (m *ButtonMessage) String() string { return proto.CompactTextString(m) }
func (*ButtonMessage) ProtoMessage()    {}
func (*ButtonMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bluewand_6d8fc805bd0dbb0e, []int{2}
}
func (m *ButtonMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ButtonMessage.Unmarshal(m, b)
}
func (m *ButtonMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ButtonMessage.Marshal(b, m, deterministic)
}
func (dst *ButtonMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ButtonMessage.Merge(dst, src)
}
func (m *ButtonMessage) XXX_Size() int {
	return xxx_messageInfo_ButtonMessage.Size(m)
}
func (m *ButtonMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ButtonMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ButtonMessage proto.InternalMessageInfo

func (m *ButtonMessage) GetPressed() bool {
	if m != nil {
		return m.Pressed
	}
	return false
}

// MotionMessage is represented as a set of Quantarion Units at a current state
// Raw uints are 2 bytes and are converted to Uint32 before sending the wire.
type MotionMessage struct {
	W                    uint32   `protobuf:"varint,1,opt,name=w,proto3" json:"w,omitempty"`
	X                    uint32   `protobuf:"varint,2,opt,name=x,proto3" json:"x,omitempty"`
	Y                    uint32   `protobuf:"varint,3,opt,name=y,proto3" json:"y,omitempty"`
	Z                    uint32   `protobuf:"varint,4,opt,name=z,proto3" json:"z,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MotionMessage) Reset()         { *m = MotionMessage{} }
func (m *MotionMessage) String() string { return proto.CompactTextString(m) }
func (*MotionMessage) ProtoMessage()    {}
func (*MotionMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bluewand_6d8fc805bd0dbb0e, []int{3}
}
func (m *MotionMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MotionMessage.Unmarshal(m, b)
}
func (m *MotionMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MotionMessage.Marshal(b, m, deterministic)
}
func (dst *MotionMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MotionMessage.Merge(dst, src)
}
func (m *MotionMessage) XXX_Size() int {
	return xxx_messageInfo_MotionMessage.Size(m)
}
func (m *MotionMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_MotionMessage.DiscardUnknown(m)
}

var xxx_messageInfo_MotionMessage proto.InternalMessageInfo

func (m *MotionMessage) GetW() uint32 {
	if m != nil {
		return m.W
	}
	return 0
}

func (m *MotionMessage) GetX() uint32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *MotionMessage) GetY() uint32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *MotionMessage) GetZ() uint32 {
	if m != nil {
		return m.Z
	}
	return 0
}

func init() {
	proto.RegisterType((*EmptyMessage)(nil), "bluewand.EmptyMessage")
	proto.RegisterType((*Identifier)(nil), "bluewand.Identifier")
	proto.RegisterType((*ButtonMessage)(nil), "bluewand.ButtonMessage")
	proto.RegisterType((*MotionMessage)(nil), "bluewand.MotionMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BlueWandClient is the client API for BlueWand service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlueWandClient interface {
	// OnConnect server to client single call to return a single Wand unique
	// Identifier.
	OnConnect(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*Identifier, error)
	// OnButton server to client streaming RPC endpoint
	// Call to receive Button Press streaming message for the Button state.
	OnButton(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (BlueWand_OnButtonClient, error)
	// OnMotion server to client streaming RPC endpoint
	// Call to receive Motion Move streaming message for the Motion in Quantarion
	// state.
	OnMotion(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (BlueWand_OnMotionClient, error)
}

type blueWandClient struct {
	cc *grpc.ClientConn
}

func NewBlueWandClient(cc *grpc.ClientConn) BlueWandClient {
	return &blueWandClient{cc}
}

func (c *blueWandClient) OnConnect(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*Identifier, error) {
	out := new(Identifier)
	err := c.cc.Invoke(ctx, "/bluewand.BlueWand/OnConnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blueWandClient) OnButton(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (BlueWand_OnButtonClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BlueWand_serviceDesc.Streams[0], "/bluewand.BlueWand/OnButton", opts...)
	if err != nil {
		return nil, err
	}
	x := &blueWandOnButtonClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlueWand_OnButtonClient interface {
	Recv() (*ButtonMessage, error)
	grpc.ClientStream
}

type blueWandOnButtonClient struct {
	grpc.ClientStream
}

func (x *blueWandOnButtonClient) Recv() (*ButtonMessage, error) {
	m := new(ButtonMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blueWandClient) OnMotion(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (BlueWand_OnMotionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BlueWand_serviceDesc.Streams[1], "/bluewand.BlueWand/OnMotion", opts...)
	if err != nil {
		return nil, err
	}
	x := &blueWandOnMotionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlueWand_OnMotionClient interface {
	Recv() (*MotionMessage, error)
	grpc.ClientStream
}

type blueWandOnMotionClient struct {
	grpc.ClientStream
}

func (x *blueWandOnMotionClient) Recv() (*MotionMessage, error) {
	m := new(MotionMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlueWandServer is the server API for BlueWand service.
type BlueWandServer interface {
	// OnConnect server to client single call to return a single Wand unique
	// Identifier.
	OnConnect(context.Context, *EmptyMessage) (*Identifier, error)
	// OnButton server to client streaming RPC endpoint
	// Call to receive Button Press streaming message for the Button state.
	OnButton(*Identifier, BlueWand_OnButtonServer) error
	// OnMotion server to client streaming RPC endpoint
	// Call to receive Motion Move streaming message for the Motion in Quantarion
	// state.
	OnMotion(*Identifier, BlueWand_OnMotionServer) error
}

func RegisterBlueWandServer(s *grpc.Server, srv BlueWandServer) {
	s.RegisterService(&_BlueWand_serviceDesc, srv)
}

func _BlueWand_OnConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlueWandServer).OnConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bluewand.BlueWand/OnConnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlueWandServer).OnConnect(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlueWand_OnButton_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Identifier)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlueWandServer).OnButton(m, &blueWandOnButtonServer{stream})
}

type BlueWand_OnButtonServer interface {
	Send(*ButtonMessage) error
	grpc.ServerStream
}

type blueWandOnButtonServer struct {
	grpc.ServerStream
}

func (x *blueWandOnButtonServer) Send(m *ButtonMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _BlueWand_OnMotion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Identifier)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlueWandServer).OnMotion(m, &blueWandOnMotionServer{stream})
}

type BlueWand_OnMotionServer interface {
	Send(*MotionMessage) error
	grpc.ServerStream
}

type blueWandOnMotionServer struct {
	grpc.ServerStream
}

func (x *blueWandOnMotionServer) Send(m *MotionMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _BlueWand_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bluewand.BlueWand",
	HandlerType: (*BlueWandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnConnect",
			Handler:    _BlueWand_OnConnect_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OnButton",
			Handler:       _BlueWand_OnButton_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnMotion",
			Handler:       _BlueWand_OnMotion_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bluewand.proto",
}

func init() { proto.RegisterFile("bluewand.proto", fileDescriptor_bluewand_6d8fc805bd0dbb0e) }

var fileDescriptor_bluewand_6d8fc805bd0dbb0e = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0x17, 0x27, 0xda, 0xbd, 0xac, 0x43, 0x82, 0x7f, 0xc2, 0x0e, 0x22, 0x39, 0xcd, 0x4b,
	0x11, 0x3d, 0x8a, 0x97, 0x8a, 0x88, 0x87, 0xb1, 0xd1, 0x8b, 0xe7, 0x6e, 0x7d, 0x1d, 0xc5, 0xed,
	0x4d, 0x69, 0x13, 0xba, 0xee, 0xfb, 0xf9, 0xbd, 0x24, 0x8b, 0x5d, 0x2c, 0x08, 0xde, 0xf2, 0x7b,
	0x79, 0x1e, 0xc8, 0x8f, 0x07, 0x46, 0x8b, 0xb5, 0xc1, 0x3a, 0xa5, 0x2c, 0x2a, 0x4a, 0xa5, 0x15,
	0x0f, 0x5a, 0x96, 0x23, 0x18, 0xbe, 0x6c, 0x0a, 0xdd, 0x4c, 0xb1, 0xaa, 0xd2, 0x15, 0xca, 0x6b,
	0x80, 0xb7, 0x0c, 0x49, 0xe7, 0x1f, 0x39, 0x96, 0xfc, 0x0c, 0xfa, 0x26, 0xcf, 0x04, 0xbb, 0x61,
	0x93, 0x41, 0x62, 0x9f, 0xf2, 0x16, 0xc2, 0xd8, 0x68, 0xad, 0xe8, 0xa7, 0xc0, 0x05, 0x9c, 0x16,
	0x25, 0x56, 0x15, 0xba, 0x58, 0x90, 0xb4, 0x28, 0x5f, 0x21, 0x9c, 0x2a, 0x9d, 0xfb, 0xe8, 0x10,
	0x58, 0xbd, 0x0f, 0x85, 0x09, 0xab, 0x2d, 0x6d, 0xc5, 0x91, 0xa3, 0xad, 0xa5, 0x46, 0xf4, 0x1d,
	0x35, 0x96, 0x76, 0xe2, 0xd8, 0xd1, 0xee, 0xfe, 0x8b, 0x41, 0x10, 0xaf, 0x0d, 0xbe, 0xa7, 0x94,
	0xf1, 0x47, 0x18, 0xcc, 0xe8, 0x59, 0x11, 0xe1, 0x52, 0xf3, 0xcb, 0xe8, 0x20, 0xf6, 0xdb, 0x62,
	0x7c, 0xee, 0xef, 0xde, 0x46, 0xf6, 0xf8, 0x13, 0x04, 0x33, 0x72, 0xff, 0xe7, 0x7f, 0x66, 0xc6,
	0x57, 0xfe, 0xda, 0xf1, 0x94, 0xbd, 0x3b, 0xe6, 0xea, 0xce, 0xe9, 0xff, 0x7a, 0xc7, 0xdd, 0xd6,
	0xe3, 0x09, 0x5c, 0x6c, 0x30, 0xfa, 0x4c, 0x49, 0x45, 0xab, 0xb2, 0x58, 0x1e, 0xa2, 0x71, 0xd8,
	0xda, 0xcd, 0xed, 0x3a, 0x73, 0xb6, 0x38, 0xd9, 0xcf, 0xf4, 0xf0, 0x1d, 0x00, 0x00, 0xff, 0xff,
	0xa6, 0x20, 0xee, 0x49, 0xb8, 0x01, 0x00, 0x00,
}
